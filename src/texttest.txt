

  const [pdf, setPdf] = useState("");
  const [width, setWidth] = useState(0);
  // const [scale, setScale] = useState(0);
  const [image, setImage] = useState("");
  const [height, setHeight] = useState(0);
  // const [totalPages, setTotalPages] = useState(1);
  // const [currentPage, setCurrentPage] = useState(1);
  const [pdfRendering, setPdfRendering] = useState("");
  const [pageRendering, setPageRendering] = useState("");

  async function getPdf(event) {
    try {
      setPdfRendering(true);
      const _PDF_DOC = await PDFJS.getDocument(file).promise.then((pdf) => {
        const pages = [];
      });
      setPdf(_PDF_DOC);
      setPdfRendering(false);
      // console.log(pdf);
      convertToCanvas();
    } catch (error) {
      alert(error.message);
    }
  }

  async function convertToCanvas() {
    try {
      setPageRendering(true);
      var page = await pdf.getPage(1).then((pdf) => {
        var viewport = page.getViewport(1);
        var render_context = {
          canvasContext: document.querySelector("#pdf-canvas").getContext("2d"),
          viewport: viewport,
        };
        console.log("viewport", viewport, viewport.scale);
        setWidth(viewport.width);
        setHeight(viewport.height);
      }).then;

      // setScale(viewport.scale);
      // await page.render(render_context);

      var canvas = document.getElementById("pdf-canvas");
      var img = canvas.toDataURL("image/png");
      setImage(img);
      setPageRendering(false);
    } catch (error) {
      console.log(error.message);
    }
  }
  // async function renderPage() {
  //   setPageRendering(true);
  //   console.log("rendering page");
  //   var page = await pdf.getPage(currentPage);
  //   console.log("renderpage 2");
  //   var viewport = page.getViewport(currentPage);
  //   console.log("renderpage 3");
  //   var render_context = {
  //     canvasContext: document.querySelector("#pdf-canvas").getContext("2d"),
  //     viewport: viewport,
  //   };
  //   console.log("viewport", viewport, viewport.scale);
  //   setWidth(viewport.width);
  //   setHeight(viewport.height);
  //   setScale(viewport.scale);
  //   await page.render(render_context);

  //   var canvas = document.getElementById("pdf-canvas");
  //   var img = canvas.toDataURL("image/png");
  //   setImage(img);
  //   setPageRendering(false);
  // }

  // function changePage() {
  //   setCurrentPage();
  // }

  // useEffect(() => {
  //   pdf && renderPage();
  //   // eslint-disable-next-line
  // }, [pdf, currentPage]);

  return (
    <div className="App">
      <button id="simulate_GET" onClick={() => getPdf()}>
        Simulate GET request
      </button>

      <div id="pdf-main-container">
        <div id="pdf-loader" hidden={!pdfRendering}>
          Loading document ...
        </div>
        <div id="page-loader" hidden={!pageRendering}>
          Loading page ...
        </div>
      </div>
      {/* <canvas id="pdf-canvas" width={width} height={height}></canvas> */}
      {image && (
        <img src={image} style={{ width: 200, height: 200 }} alt="pdfImage" />
      )}
    </div>
  );
}

























import { useState, useEffect } from "react";
import "./App.css";
import file from "./i-140.pdf";

const PDFJS = window.pdfjsLib;
PDFJS.disableWorker = true; // due to CORS

function App() {
  const [pdf, setPdf] = useState("");
  const [width, setWidth] = useState(0);
  // const [scale, setScale] = useState(0);
  const [image, setImage] = useState("");
  const [height, setHeight] = useState(0);
  // const [totalPages, setTotalPages] = useState(1);
  // const [currentPage, setCurrentPage] = useState(1);
  const [pdfRendering, setPdfRendering] = useState("");
  const [pageRendering, setPageRendering] = useState("");

  async function getPdf(event) {
    try {
      setPdfRendering(true);
      const _PDF_DOC = await PDFJS.getDocument(file).promise.then((pdf) => {
        const pages = [];
      });
      setPdf(_PDF_DOC);
      setPdfRendering(false);
      // console.log(pdf);
      convertToCanvas();
    } catch (error) {
      alert(error.message);
    }
  }

  async function convertToCanvas() {
    // const page = await pdf.getPage(1).then((page) => {
    //   const scale = 1.5;
    //   const viewport = page.getViewport(scale);
    //   const canvas = document.createElement("canvas");
    //   const canvasContext = canvas.getContext("2d");
    //   canvas.height = viewport.height;
    //   canvas.width = viewport.width;
    //   page
    //     .render({
    //       canvasContext,
    //       viewport,
    //     })
    //     .promise.then(() => {
    //       const img = canvas.toDataURL("image/png");
    //       setImage(img);
    //       //  return canvas.toDataURL('image/jpeg');
    //     });
    // });
    const page = await pdf.getPage(1);
    const viewport = page.getViewport(1);
    const canvas = document.createElement("canvas");
    const canvasContext = canvas.getContext("2d");
    console.log(page);
    console.log("viewport", viewport, viewport.scale);

    const img = canvas.toDataURL("image/png");
    setImage(img);
    console.log(image);
    setPageRendering(false);
  }
  // async function renderPage() {
  //   setPageRendering(true);
  //   console.log("rendering page");
  //   var page = await pdf.getPage(currentPage);
  //   console.log("renderpage 2");
  //   var viewport = page.getViewport(currentPage);
  //   console.log("renderpage 3");
  //   var render_context = {
  //     canvasContext: document.querySelector("#pdf-canvas").getContext("2d"),
  //     viewport: viewport,
  //   };
  //   console.log("viewport", viewport, viewport.scale);
  //   setWidth(viewport.width);
  //   setHeight(viewport.height);
  //   setScale(viewport.scale);
  //   await page.render(render_context);

  //   var canvas = document.getElementById("pdf-canvas");
  //   var img = canvas.toDataURL("image/png");
  //   setImage(img);
  //   setPageRendering(false);
  // }

  // function changePage() {
  //   setCurrentPage();
  // }

  // useEffect(() => {
  //   pdf && renderPage();
  //   // eslint-disable-next-line
  // }, [pdf, currentPage]);

  return (
    <div className="App">
      <button id="simulate_GET" onClick={() => getPdf()}>
        Simulate GET request
      </button>

      <div id="pdf-main-container">
        <div id="pdf-loader" hidden={!pdfRendering}>
          Loading document ...
        </div>
        <div id="page-loader" hidden={!pageRendering}>
          Loading page ...
        </div>
      </div>
      {/* <canvas id="pdf-canvas" width={width} height={height}></canvas> */}
      {image && (
        <img src={image} style={{ width: 200, height: 200 }} alt="pdfImage" />
      )}
    </div>
  );
}

export default App;
